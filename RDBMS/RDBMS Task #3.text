create database retail_store;

CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(100),
    phone VARCHAR(20),
    address TEXT,
    join_date DATE
);

INSERT INTO Customers (customer_id, first_name, last_name, email, phone, address, join_date) VALUES
(1, 'Ravi', 'Sharma', 'ravi.sharma@example.com', '9876543210', 'Mumbai, Maharashtra', '2023-01-10'),
(2, 'Priya', 'Verma', 'priya.verma@example.com', '9867543210', 'Delhi, Delhi', '2023-02-15'),
(3, 'Amit', 'Kumar', 'amit.kumar@example.com', '8765432109', 'Bangalore, Karnataka', '2023-03-10'),
(4, 'Sneha', 'Patel', 'sneha.patel@example.com', '7896541230', 'Ahmedabad, Gujarat', '2023-04-05'),
(5, 'Rahul', 'Joshi', 'rahul.joshi@example.com', '9812345678', 'Jaipur, Rajasthan', '2023-05-20'),
(6, 'Anjali', 'Singh', 'anjali.singh@example.com', '8765123456', 'Lucknow, Uttar Pradesh', '2023-06-18'),
(7, 'Kunal', 'Mehta', 'kunal.mehta@example.com', '7894561237', 'Chennai, Tamil Nadu', '2023-07-02'),
(8, 'Divya', 'Reddy', 'divya.reddy@example.com', '7891234568', 'Hyderabad, Telangana', '2023-08-11'),
(9, 'Rajesh', 'Desai', 'rajesh.desai@example.com', '8123456789', 'Pune, Maharashtra', '2023-09-01'),
(10, 'Nisha', 'Yadav', 'nisha.yadav@example.com', '8996541237', 'Kolkata, West Bengal', '2023-10-12'),
(11, 'Arjun', 'Thakur', 'arjun.thakur@example.com', '7654321098', 'Chandigarh, Punjab', '2023-11-03'),
(12, 'Meera', 'Kapoor', 'meera.kapoor@example.com', '7987654321', 'Bhopal, Madhya Pradesh', '2023-12-22'),
(13, 'Varun', 'Gupta', 'varun.gupta@example.com', '8901234567', 'Surat, Gujarat', '2024-01-05'),
(14, 'Pooja', 'Bhatia', 'pooja.bhatia@example.com', '9878901234', 'Nagpur, Maharashtra', '2024-02-14'),
(15, 'Neeraj', 'Chauhan', 'neeraj.chauhan@example.com', '8009876543', 'Cochin, Kerala', '2024-03-10');

CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100) NOT NULL,
    category VARCHAR(50),
    price DECIMAL(10, 2) NOT NULL,
    stock_quantity INT NOT NULL
);

INSERT INTO Products (product_id, product_name, category, price, stock_quantity) VALUES
(1, 'Tata Tea', 'Groceries', 250.00, 50),
(2, 'Parle-G Biscuits', 'Snacks', 50.00, 100),
(3, 'Samsung Galaxy M14', 'Electronics', 14000.00, 20),
(4, 'Lenovo Laptop', 'Electronics', 50000.00, 10),
(5, 'Nike Running Shoes', 'Footwear', 4500.00, 30),
(6, 'Adidas T-shirt', 'Apparel', 1200.00, 25),
(7, 'Prestige Cooker', 'Home Appliances', 2800.00, 15),
(8, 'Dettol Soap', 'Personal Care', 40.00, 200),
(9, 'Colgate Toothpaste', 'Personal Care', 90.00, 150),
(10, 'Classmate Notebook', 'Stationery', 50.00, 500),
(11, 'Amul Butter', 'Dairy', 200.00, 80),
(12, 'Fortune Oil', 'Groceries', 1200.00, 40),
(13, 'Sony Headphones', 'Electronics', 3500.00, 25),
(14, 'Puma Cap', 'Apparel', 600.00, 40),
(15, 'LG Refrigerator', 'Home Appliances', 30000.00, 5);

CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE NOT NULL,
    total_amount DECIMAL(10, 2),
    order_status VARCHAR(20),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

INSERT INTO Orders (order_id, customer_id, order_date, total_amount, order_status) VALUES
(1, 1, '2023-07-20', 1450.00, 'Shipped'),
(2, 2, '2023-08-10', 4500.00, 'Pending'),
(3, 3, '2023-09-05', 6000.00, 'Cancelled'),
(4, 4, '2023-09-15', 2500.00, 'Shipped'),
(5, 5, '2023-10-01', 8000.00, 'Pending'),
(6, 6, '2023-10-12', 3000.00, 'Shipped'),
(7, 7, '2023-11-03', 5000.00, 'Shipped'),
(8, 8, '2023-11-15', 1500.00, 'Cancelled'),
(9, 9, '2023-12-05', 3500.00, 'Shipped'),
(10, 10, '2024-01-05', 4500.00, 'Shipped'),
(11, 11, '2024-01-10', 3000.00, 'Pending'),
(12, 12, '2024-01-15', 1000.00, 'Cancelled'),
(13, 13, '2024-02-01', 7000.00, 'Shipped'),
(14, 14, '2024-02-10', 2500.00, 'Pending'),
(15, 15, '2024-02-20', 4500.00, 'Shipped');

CREATE TABLE OrderDetails (
    order_detail_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT NOT NULL,
    unit_price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

INSERT INTO OrderDetails (order_detail_id, order_id, product_id, quantity, unit_price) VALUES
(1, 1, 1, 5, 250.00),
(2, 2, 3, 1, 14000.00),
(3, 3, 7, 2, 2800.00),
(4, 4, 8, 10, 40.00),
(5, 5, 5, 2, 4500.00),
(6, 6, 2, 20, 50.00),
(7, 7, 13, 2, 3500.00),
(8, 8, 9, 15, 90.00),
(9, 9, 12, 1, 1200.00),
(10, 10, 14, 1, 600.00),
(11, 11, 11, 10, 200.00),
(12, 12, 4, 1, 50000.00),
(13, 13, 6, 3, 1200.00),
(14, 14, 10, 50, 50.00),
(15, 15, 15, 1, 30000.00);

CREATE TABLE Payments (
    payment_id INT PRIMARY KEY,
    order_id INT,
    payment_date DATE NOT NULL,
    payment_amount DECIMAL(10, 2) NOT NULL,
    payment_method VARCHAR(20),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id)
);

INSERT INTO Payments (payment_id, order_id, payment_date, payment_amount, payment_method) VALUES
(1, 1, '2023-07-21', 1450.00, 'Credit Card'),
(2, 2, '2023-08-11', 4500.00, 'UPI'),
(3, 3, '2023-09-06', 6000.00, 'PayPal'),
(4, 4, '2023-09-16', 2500.00, 'Net Banking'),
(5, 5, '2023-10-02', 8000.00, 'Debit Card'),
(6, 6, '2023-10-13', 3000.00, 'Credit Card'),
(7, 7, '2023-11-04', 5000.00, 'UPI'),
(8, 8, '2023-11-16', 1500.00, 'Cash'),
(9, 9, '2023-12-06', 3500.00, 'UPI'),
(10, 10, '2024-01-06', 4500.00, 'Credit Card'),
(11, 11, '2024-01-11', 3000.00, 'PayPal'),
(12, 12, '2024-01-16', 1000.00, 'Net Banking'),
(13, 13, '2024-02-02', 7000.00, 'UPI'),
(14, 14, '2024-02-11', 2500.00, 'Cash'),
(15, 15, '2024-02-21', 4500.00, 'Credit Card');

1. Find the Total Number of Orders for Each Customer

select c.customer_id, c.first_name, c.last_name, count(order_id) as taotal_orders FROM customers as c  left join orders as o on c.customer_id=o.customer_id  GROUP by c.customer_id, c.first_name, c.last_name

2. Find the Total Sales Amount for Each Product (Revenue per Product)

select p.product_id, p.product_name, sum(o.quantity*o.unit_price)as total_revenu from products as p left JOIN orderdetails as o on p.product_id=o.product_id GROUP by p.product_id, p.product_name

3. Find the Most Expensive Product Sold

SELECT product_name, max(price)as most_expensive  FROM products as p   LEFT join OrderDetails as o on p.product_id=o.product_id where order_id in(SELECT order_id FROM orders)  GROUP by product_name order by most_expensive desc limit 1;

4. Get the List of Customers Who Have Placed Orders in the Last 30 Days

SELECT  c.customer_id ,c.first_name ,c.last_name FROM customers as c LEFT join orders as o on c.customer_id=o.customer_id WHERE o.order_date >= '2024-02-01'
GROUP by c.customer_id

5. Calculate the Total Amount Paid by Each Customer

select c.customer_id,  c.first_name, c.last_name,sum(payment_amount) as total_amount FROM customers as c LEFT join orders as o on c.customer_id=o.customer_id LEFT join payments as p on o.order_id=p.order_id GROUP by  c.customer_id ,c.first_name, c.last_name;

6. Get the Number of Products Sold by Category

select category, count(product_id) as numOfProducts  FROM products where product_id in(select product_id from OrderDetails) GROUP by category

7. List All Orders That Are Pending (i.e., Orders that haven't been shipped yet)

select order_id from orders WHERE order_status='Pending' GROUP by order_id

8. Find the Average Order Value (Total Order Amount / Number of Orders)

SELECT (sum(total_amount) /count(order_id))as Average_Order_Value FROM orders 

9. List the Top 5 Customers Who Have Spent the Most Money

select  c.customer_id, max(p.payment_amount)as Most_money FROM customers as c left join orders as o on c.customer_id=o.customer_id left join payments as p on o.order_id=p.order_id GROUP by c.customer_id order by  Most_money desc LIMIT 5

10. Find the Products That Have Never Been Sold

select  p.product_id FROM products as p LEFT join orderdetails as o on p.product_id=o.product_id WHERE order_id is null  GROUP by p.product_id
